class_name JamFiles
extends RefCounted
## An interface for file storage for Jam Launch servers
##
## A file storage interface that allows the server to persist data within and
## between game sessions of the same project. The implementation that runs in
## the Jam Launch cloud is based on AWS S3.
## [br][br]
## It is preferable to [JamDB] when you need to store data blobs larger than
## 400KB, or when the data is already a file on the disk.

var _jc: JamConnect

func _init(jam_connect: JamConnect) -> void:
	_jc = jam_connect


func get_file(_key: String, _file_name: String) -> bool:
	return false


## Gets the project-scoped data file for the provided key
func get_game_file(key: String, file_name: String) -> bool:
	return get_file(_jc.get_project_id() + "/" + key, file_name)


## Gets the release-scoped data file for the provided key
func get_release_file(key: String, file_name: String) -> bool:
	return get_file(_jc.get_game_id() + "/" + key, file_name)


## Gets the session-scoped data file for the provided key
func get_session_file(key: String, file_name: String) -> bool:
	return get_file(_jc.get_session_id() + "/" + key, file_name)


@warning_ignore("unused_parameter")
func put_file(key: String, file_name: String) -> bool:
	return false


## Persists a project-scoped data file
func put_game_file(key: String, file_name: String) -> bool:
	return put_file(_jc.get_project_id() + "/" + key, file_name)


## Persists a release-scoped data file
func put_release_file(key: String, file_name: String) -> bool:
	return put_file(_jc.get_game_id() + "/" + key, file_name)


## Persists a session-scoped data file
func put_session_file(key: String, file_name: String) -> bool:
	return put_file(_jc.get_session_id() + "/" + key, file_name)


func get_file_async(_key: String, _file_name: String) -> void:
	_jc.game_files_async_result.emit(null, "No DB available in dev mode")


## Asynchronously gets the project-scoped data file for the provided key.
## Triggers [signal JamConnect.game_files_async_result] upon completion.
func get_game_file_async(key: String, file_name: String) -> void:
	get_file_async(_jc.get_project_id() + "/" + key, file_name)


## Asynchronously gets the release-scoped data file for the provided key.
## Triggers [signal JamConnect.game_files_async_result] upon completion.
func get_release_file_async(key: String, file_name: String) -> void:
	get_file_async(_jc.get_game_id() + "/" + key, file_name)


## Asynchronously gets the session-scoped data file for the provided key.
## Triggers [signal JamConnect.game_files_async_result] upon completion.
func get_session_file_async(key: String, file_name: String) -> void:
	get_file_async(_jc.get_session_id() + "/" + key, file_name)


@warning_ignore("unused_parameter")
func put_file_async(_key: String, _file_name: String) -> void:
	_jc.game_files_async_result.emit(null, "No DB available in dev mode")


## Asynchronously persists a project-scoped data file.
## Triggers [signal JamConnect.game_files_async_result] upon completion.
func put_game_file_async(key: String, file_name: String) -> void:
	put_file_async(_jc.get_project_id() + "/" + key, file_name)


## Asynchronously persists a release-scoped data file.
## Triggers [signal JamConnect.game_files_async_result] upon completion.
func put_release_file_async(key: String, file_name: String) -> void:
	put_file_async(_jc.get_game_id() + "/" + key, file_name)


## Asynchronously persists a session-scoped data file.
## Triggers [signal JamConnect.game_files_async_result] upon completion.
func put_session_file_async(key: String, file_name: String) -> void:
	put_file_async(_jc.get_session_id() + "/" + key, file_name)


## Gets the last error generated by the files client
func get_last_error() -> String:
	return "server is in dev mode - no DB available"
